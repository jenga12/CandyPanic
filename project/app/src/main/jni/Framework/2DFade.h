/*
 *	File：2DFade.h
 *	Make：HALTokyo AT-13A-272 16 Toshiki Chizo
 *	Outline：2Dフェード処理クラス定義
 */

#pragma once
#ifndef _2D_FADE_H_
#define _2D_FADE_H_

/******************************************************************************/
/*                            インクルードファイル                            */
/******************************************************************************/
#include "2DPolygon.h"


/******************************************************************************/
/*                              ライブラリリンク                              */
/******************************************************************************/


/******************************************************************************/
/*                              マクロ＆定数定義                              */
/******************************************************************************/
enum FADE_STATE {
	FADE_NONE = 0,	// フェード処理していない
	FADE_IN,		// フェードイン処理中
	FADE_OUT,		// フェードアウト処理中
	FADE_END,		// フェード終了後待機中
	FADE_MAX
};

typedef FADE_STATE FADE_TYPE;


/******************************************************************************/
/*                                 構造体定義                                 */
/******************************************************************************/


/******************************************************************************/
/*                                 クラス定義                                 */
/******************************************************************************/
class C2DFade : public C2DPolygon{
	public:
		static C2DFade *Create(void);						// インスタンス生成
		void Update(void);									// 更新処理

		bool IsExecFade(void){								// フェード処理中であるかを取得
			return ((m_nState == FADE_IN) || (m_nState == FADE_OUT));
		}

		void SetColor(float r, float g, float b){		// フェード色設定
			m_Color.r = r; m_Color.g = g; m_Color.b = b;
		}

		void Start(FADE_TYPE type, unsigned int nFrame){	// フェード処理開始
			m_nState = type;
			m_nFrame = nFrame;
		}

		void Stop(void){									// フェードの強制終了
			m_nState = FADE_NONE;
			m_Color.a = 0.0f;
		}

	private:
		C2DFade();				    	// コンストラクタ
		~C2DFade(){};				    // デストラクタ
		Color_32 m_Color;			    // フェード色
		FADE_STATE m_nState;		    // フェード処理状態
		unsigned int m_nFrame;		    // フェード処理時間
		unsigned int m_nFrameCount;	// フレームカウンタ
};


/******************************************************************************/
/*                              プロトタイプ宣言                              */
/******************************************************************************/


/******************************************************************************/

#endif