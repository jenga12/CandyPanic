/*
 *	File：Vector2D.h
 *	Make：HALTokyo AT-13A-272 16 Toshiki Chizo
 *	Outline：2次元ベクトルライブラリ
 */

#pragma once
#ifndef _VECTOR_2D_H_
#define _VECTOR_2D_H_

/******************************************************************************/
/*                            インクルードファイル                            */
/******************************************************************************/


/******************************************************************************/
/*                              ライブラリリンク                              */
/******************************************************************************/


/******************************************************************************/
/*                              マクロ＆定数定義                              */
/******************************************************************************/


/******************************************************************************/
/*                                 構造体定義                                 */
/******************************************************************************/
struct Vec2 {
	public:
		Vec2(){};
		Vec2(float fx, float fy){x = fx; y = fy;};	// コンストラクタ
		Vec2 operator + (const Vec2& v) const{
			return Vec2(x + v.x, y + v.y);
		};
		Vec2 operator - (const Vec2& v) const{
			return Vec2(x - v.x, y - v.y);
		};
		Vec2 operator * (float scl) const{
			return Vec2(x * scl, y * scl);
		};
		Vec2 operator / (float scl) const{
			float fInv = 1.0f / scl;
			return Vec2(x * fInv, y * fInv);
		};

		Vec2& operator += (const Vec2& v){
			x += v.x;
			y += v.y;
			return *this;
		};

		Vec2& operator -= (const Vec2& v){
			x -= v.x;
			y -= v.y;
			return *this;
		}

		Vec2& operator *= (float scl){
			x *= scl;
			y *= scl;
			return *this;
		}

		Vec2& operator /= (float scl){
			float fInv = 1.0f / scl;
			x *= fInv;
			y *= fInv;
			return *this;
		}

		Vec2 operator - () const{
			return Vec2(-x, -y);
		}


		float x, y;
};


/******************************************************************************/
/*                                 クラス定義                                 */
/******************************************************************************/


/******************************************************************************/
/*                              プロトタイプ宣言                              */
/******************************************************************************/


/******************************************************************************/

#endif