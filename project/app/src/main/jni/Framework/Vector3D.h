/*
 *	File：Vector3D.h
 *	Make：HALTokyo AT-13A-272 16 Toshiki Chizo
 *	Outline：3次元ベクトルライブラリ
 */

#pragma once
#ifndef _VECTOR_3D_H_
#define _VECTOR_3D_H_

/******************************************************************************/
/*                            インクルードファイル                            */
/******************************************************************************/


/******************************************************************************/
/*                              ライブラリリンク                              */
/******************************************************************************/


/******************************************************************************/
/*                              マクロ＆定数定義                              */
/******************************************************************************/


/******************************************************************************/
/*                                 構造体定義                                 */
/******************************************************************************/


/******************************************************************************/
/*                                 クラス定義                                 */
/******************************************************************************/
struct Vec3 {
	public:
		Vec3(){};
		Vec3(float fx, float fy, float fz){x = fx; y = fy; z = fz;};
		Vec3 operator + (const Vec3& v3) const{
			return Vec3(x + v3.x, y + v3.y, z + v3.z);
		}

		Vec3 operator - (const Vec3& v3) const{
			return Vec3(x - v3.x, y - v3.y, z - v3.z);
		}

		Vec3 operator * (float s) const{
			return Vec3(x * s, y * s, z * s);
		}

		Vec3 operator / (float s) const{
			float fInverse = 1.0f / s;
			return Vec3(x * fInverse, y * fInverse, z * fInverse);
		}

		Vec3& operator += (const Vec3& v3){
			x += v3.x;
			y += v3.y;
			z += v3.z;
			return *this;
		}

		Vec3& operator -= (const Vec3& v3){
			x -= v3.x;
			y -= v3.y;
			z -= v3.z;
			return *this;
		}

		Vec3& operator *= (float s){
			x *= s;
			y *= s;
			z *= s;
			return *this;
		}

		Vec3& operator /= (float s){
			float fInverse = 1.0f / s;
			x *= fInverse;
			y *= fInverse;
			z *= fInverse;
			return *this;
		}

		Vec3 operator - () const{
			return Vec3(-x, -y, -z);
		}

		float x, y, z;
};


/******************************************************************************/
/*                              プロトタイプ宣言                              */
/******************************************************************************/


/******************************************************************************/

#endif